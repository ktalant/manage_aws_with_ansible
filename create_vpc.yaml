- name: EC2 creates VPC on ohio region 
  hosts: localhost
  connection: local
  gather_facts: false
  become: yes
  become_method: sudo
  tasks:

# ------------------VPC CREATION STARTS HERE-------------------

    - name: create VPC with tags
      ec2_vpc_net:
        name: "{{name_of_VPC}}"
        cidr_block: 10.0.0.0/16
        region: "{{region}}"
        tags:
          name: "{{name_of_VPC}}"
        tenancy: default

# ------------------VPC GATHER FACTS-------------------

    - name: gather facts to get vpc_id of "{{name_of_VPC}}"
      ec2_vpc_net_facts:
        region: "{{region}}"
        filters: 
          "tag:Name": "{{name_of_VPC}}"
      register: my_vpc_info
      

    - name: Display VPC facts(information)
      debug:
        var: my_vpc_info.vpcs[0].vpc_id

# ------------------PUBLIC-SUBNET-STARTS HERE-------------------
# ------------------PUBLIC-SUBNET-1 -------------------

    - name: Create subnet in "{{name_of_VPC}}"
      ec2_vpc_subnet:
        region: "{{region}}"
        az: "{{az1}}"
        state: present
        vpc_id: "{{my_vpc_info.vpcs[0].vpc_id}}"
        cidr: 10.0.1.0/24
        resource_tags:
          Name: my_public_subnet_1   


# ------------------PUBLIC-SUBNET-2-------------------
    - name: Create subnet in "{{name_of_VPC}}"
      ec2_vpc_subnet:
        region: "{{region}}"
        az: "{{az2}}"
        state: present
        vpc_id: "{{my_vpc_info.vpcs[0].vpc_id}}"
        cidr: 10.0.2.0/24
        resource_tags:
          Name: my_public_subnet_2


# ------------------PUBLIC-SUBNET-3-------------------
    - name: Create subnet in "{{name_of_VPC}}"
      ec2_vpc_subnet:
        region: "{{region}}"
        az: "{{az3}}"
        state: present
        vpc_id: "{{my_vpc_info.vpcs[0].vpc_id}}"
        cidr: 10.0.3.0/24
        resource_tags:
          Name: my_public_subnet_3
# ------------------PUBLIC-SUBNET-ENDS HERE-------------------
# ------------------GATHER FACTS TO GET PUBLIC-SUBNET-IDS-------------------
    - name: Gather Facts of subnets to get subnet IDs 
      ec2_vpc_subnet_facts:
        region: "{{region}}"
        filters:
          vpc-id: "{{my_vpc_info.vpcs[0].vpc_id}}"
          "tag:Name": "{{ item }}"
      loop:
        - my_public_subnet_1
        - my_public_subnet_2
        - my_public_subnet_3
      register: subnet_facts

    - debug:
        var: "{{ (vpc_subnet_facts.subnets | selectattr('tags.Name','equalto','my_public_subnet_1') | first).id }}"
       



    

# ------------------create IGW and attach to new created VPC-------------------
    # - name: create an IGW to "{{name_of_VPC}}"
    #   ec2_vpc_igw:
    #     region: "{{region}}"
    #     vpc_id: "{{my_vpc_info.vpcs[0].vpc_id}}"
    #     state: present
    #     resource_tags:
    #       Name: "{{name_of_VPC}}"
    #   register: igw

# ------------------create Public-Route-Table for public subnets-------------------
    # - name: Set up public subnet route table
    #   ec2_vpc_route_table:
    #     vpc_id: "{{my_vpc_info.vpcs[0].vpc_id}}"
    #     region: "{{region}}"
    #     tags:
    #       Name: Public-Route-Table
    #     subnets:
    #       - "{{ subnet_facts.subnets|map(attribute='id')|list }}"
    #     routes:
    #       - dest: 0.0.0.0/0
    #         gateway_id: "{{ igw.gateway_id }}"
    #   register: public_route_table
         

